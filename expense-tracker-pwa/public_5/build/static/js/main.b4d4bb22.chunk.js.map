{"version":3,"sources":["components/Header.tsx","components/context/AppReducer.tsx","components/context/GlobalState.tsx","components/CurrentBalance.tsx","components/IncomeExpense.tsx","components/Transaction.tsx","components/TransactionHistory.tsx","components/AddTransaction.tsx","firebase.ts","App.tsx","index.tsx","swDev.js"],"names":["Header","AppReducer","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","delTransaction","addTransaction","CurrentBalance","currentBalance","useContext","map","transactionamount","reduce","acc","item","toFixed","IncomeExpense","transactionAmounts","income","expense","Math","abs","className","Transaction","sign","transactionType","description","onClick","TransactionHistory","AddTransaction","useState","setDescription","setTransactionAmount","onSubmit","e","preventDefault","newTransaction","Date","getTime","htmlFor","placeholder","onChange","target","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messaging","App","Notification","requestPermission","then","permission","getToken","currentToken","alert","prompt","console","log","catch","err","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","register","registration","scope"],"mappings":"0OAaeA,MAXf,WACI,OAEI,8BACI,8E,wBCYGC,EAlBI,SAACC,EAA2BC,GAC3C,OAAOA,EAAOC,MACV,IAAK,qBACD,OAAO,2BACAF,GADP,IAEIG,aAAcH,EAAMG,aACfC,QAAO,SAACC,GAAD,OAA4BA,EAAYC,KAAOL,EAAOM,aAE1E,IAAK,kBACD,OAAO,2BACAP,GADP,IAEIG,aAAa,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,iBAElD,QACM,OAAOH,ICXbQ,EAAoB,CACtBL,aAAc,IAGLM,EAAgBC,wBAAcF,GAE9BG,EAAiB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAmB,EAEpBC,qBAAWd,EAAYS,GAFH,mBAEvCR,EAFuC,KAEhCc,EAFgC,KAkB/C,OACI,cAACL,EAAcM,SAAf,CAAwBC,MACpB,CACIb,aAAaH,EAAMG,aACnBc,eAlBZ,SAAwBX,GACpBQ,EAAS,CACLZ,KAAK,qBACLK,QAASD,KAgBLY,eAZZ,SAAwBb,GACpBS,EAAS,CACLZ,KAAK,kBACLK,QAASF,MAKb,SAOKO,KCXEO,MAnBf,WAA2B,IAKjBC,EAHmBC,qBAAWZ,GAA5BN,aAEgCmB,KAAI,SAACjB,GAAD,OAA0CA,EAAYkB,qBACxDC,QAAO,SAACC,EAASC,GAAV,OAAwBD,EAAOC,IAAO,GAAGC,QAAQ,GAElG,OAEI,gCACI,kDAGA,qBAAIrB,GAAG,UAAP,cACMc,SCbLQ,EAA2B,WAAO,IAIrCC,EAFmBR,qBAAWZ,GAA5BN,aAEgCmB,KAAI,SAACjB,GAAD,OAA2CA,EAAYkB,qBAE7FO,EAASD,EACVzB,QAAO,SAACC,GAAD,OAAwBA,EAAc,KAC7CmB,QAAO,SAACC,EAAYpB,GAAb,OAAqCoB,EAAOpB,IAAc,GACjEsB,QAAQ,GAEPI,EAAUC,KAAKC,IAAIJ,EACpBzB,QAAO,SAACC,GAAD,OAAwBA,EAAc,KAC7CmB,QAAO,SAACC,EAAYpB,GAAb,OAAqCoB,EAAOpB,IAAc,IAChEsB,QAAQ,GAEd,OACI,sBAAKO,UAAU,oBAAf,UAEI,gCACI,wCACA,oBAAGA,UAAU,aAAb,cAA4BJ,QAGhC,gCACI,yCACA,oBAAGI,UAAU,cAAb,cAA6BH,YC3BhCI,EAAc,SAAC,GAAuB,IAAtB9B,EAAqB,EAArBA,YAEjBY,EAAmBI,qBAAWZ,GAA9BQ,eAEFmB,EAAO/B,EAAYkB,kBAAoB,EAAI,IAAK,IAChDc,EAAkBhC,EAAYkB,kBAAoB,EAAI,OAAO,QACnE,OACI,qBAAIW,UAAWG,EAAf,UACMhC,EAAYiC,YACb,iCAAOF,EAAP,IAAcJ,KAAKC,IAAI5B,EAAYkB,sBACnC,wBAAQW,UAAU,aACVK,QAAS,kBAAKtB,EAAeZ,EAAYC,KADjD,mBCRAkC,EAAqB,WAAO,IAE9BrC,EAAgBkB,qBAAWZ,GAA3BN,aAUP,OACI,gCACI,qDAGA,oBAAI+B,UAAU,OAAd,SACK/B,EAAamB,KAAI,SAACjB,GAAD,OAEd,cAAC,EAAD,CAAkCA,YAAaA,GAA7BA,EAAYC,aCxBrCmC,EAAiB,WAAO,IAEzBvB,EAAmBG,qBAAWZ,GAA9BS,eAFwB,EAISwB,mBAAS,IAJlB,mBAIzBJ,EAJyB,KAIZK,EAJY,OAKqBD,mBAAS,GAL9B,mBAKzBnB,EALyB,KAKNqB,EALM,KAuBhC,OACI,gCACI,qDAGA,uBAAMC,SArBG,SAACC,GACdA,EAAEC,iBAEF,IAAMC,EAA4E,CAC9E1C,IAAI,IAAI2C,MAAOC,UACfZ,cACAf,mBAAoBA,GAGxBL,EAAe8B,GAGfL,EAAe,IACfC,EAAqB,IAQjB,UAEI,gCAEI,uBAAOO,QAAQ,cAAf,yBAGA,uBAASjD,KAAK,OACLI,GAAG,cACH8C,YAAY,wBACZpC,MAAOsB,EACPe,SAAU,SAACP,GAAD,OAAOH,EAAeG,EAAEQ,OAAOtC,aAKtD,sBAAKkB,UAAU,eAAf,UAEI,uBAAOiB,QAAQ,oBAAf,gCAGA,uBAAQjD,KAAK,SACLI,GAAG,oBACH8C,YAAY,wBACZpC,MAAOO,EACP8B,SAAU,SAACP,GAAD,OAAOF,EAAqBE,EAAEQ,OAAOtC,aAI3D,wBAAQkB,UAAU,MAAlB,oC,QChDhBqB,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAIT,IAAMC,EAAYT,IAASS,YC2BZC,MAhBf,WAEE,ODTAC,aAAaC,oBAAoBC,MAAK,SAACC,GACnCL,EAAUM,WAAWF,MAAK,SAACG,GACzBC,MAAMD,GACNE,OAAO,QAASF,GAChBG,QAAQC,IAAIJ,GAERA,GAGFG,QAAQC,IAAI,2EAGbC,OAAM,SAACC,GACRH,QAAQC,IAAI,6CAA8CE,SCH9D,eAAC,EAAD,WACE,cAAC,EAAD,IAEA,sBAAK3C,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,WC7BR4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SCPlB,kBAAmBC,UACjBA,UAAUC,cAAcC,SAAS,UAAUjB,MAAK,SAASkB,GAEvDZ,QAAQC,IAAI,qDAAsDW,EAAaC,UAC9E,SAASV,GAEVH,QAAQC,IAAI,sCAAuCE,MAGrDH,QAAQC,IAAI,6B","file":"static/js/main.b4d4bb22.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n\r\n        <div>\r\n            <h1>\r\n                Expense Tracker By Muhammad Muneeb Waseem\r\n            </h1>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Header;","const AppReducer = (state: {transactions:any}, action: any) => {\r\n    switch(action.type){\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions\r\n                    .filter((transaction: {id:any})  => transaction.id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n      default:\r\n            return state;\r\n        };\r\n}\r\n//transaction.id !==action.payload means, that new transaction.id will not have provided/previous payload or provided/previous transaction.id\r\nexport default AppReducer;","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst initialState: any = {\r\n    transactions: []\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({children}: any) => {\r\n\r\n    const  [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    function delTransaction(id:number) {\r\n        dispatch({\r\n            type:\"DELETE_TRANSACTION\",\r\n            payload: id,//delete transaction by id\r\n        })\r\n    }\r\n\r\n    function addTransaction(transaction:any){\r\n        dispatch({\r\n            type:\"ADD_TRANSACTION\",\r\n            payload: transaction\r\n        })\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={\r\n            {\r\n                transactions:state.transactions,\r\n                delTransaction,\r\n                addTransaction\r\n            }\r\n            }> \r\n            {children }\r\n        </GlobalContext.Provider>\r\n    )\r\n}    ","import React, { useContext } from 'react';\r\n\r\n//import the GlobalState\r\nimport { GlobalContext } from \"./context/GlobalState\";\r\n\r\nfunction CurrentBalance() {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const transactionAmounts = transactions.map((transaction: {transactionamount:any}) => transaction.transactionamount);\r\n    const currentBalance = transactionAmounts.reduce((acc:any, item:any) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h4>\r\n                CURRRENT BALANCE\r\n            </h4>\r\n            <h1 id=\"balance\">\r\n                ${currentBalance}\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\nexport default CurrentBalance;","import React, { useContext } from 'react';\r\n\r\n//import the GlobalState\r\n\r\nimport { GlobalContext } from \"./context/GlobalState\";\r\n\r\nexport const IncomeExpense : React.FC = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const transactionAmounts = transactions.map((transaction : {transactionamount:any}) => transaction.transactionamount);//using transactionamount\r\n\r\n    const income = transactionAmounts\r\n        .filter((transaction:number) => transaction > 0)//income\r\n        .reduce((acc:number, transaction:number) => (acc += transaction), 0)//add income to previous incomes\r\n        .toFixed(2);\r\n\r\n    const expense = Math.abs(transactionAmounts\r\n        .filter((transaction:number) => transaction < 0)//expense\r\n        .reduce((acc:number, transaction:number) => (acc += transaction), 0)//add expense to previous expense\r\n        ).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n           \r\n            <div>\r\n                <h4>INCOME</h4>\r\n                <p className=\"money plus\">${income}</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <h4>EXPENSE</h4>\r\n                <p className=\"money minus\">${expense}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react';\r\n\r\n//importing globalstate\r\nimport { GlobalContext } from '../components/context/GlobalState';\r\n\r\nexport const Transaction = ({transaction}:any) => {\r\n\r\n    const { delTransaction } = useContext(GlobalContext);\r\n\r\n    const sign = transaction.transactionamount > 0 ? '+': '-';\r\n    const transactionType = transaction.transactionamount > 0 ? 'plus':'minus';\r\n    return (    \r\n        <li className={transactionType}>\r\n             {transaction.description}\r\n             <span>{sign}${Math.abs(transaction.transactionamount)}</span>\r\n             <button className=\"delete-btn\" \r\n                     onClick={()=> delTransaction(transaction.id)}>\r\n                     X\r\n             </button>\r\n        </li>\r\n    )\r\n}","import React, { useContext } from 'react'\r\n\r\n//importing transaction\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n//importing GlobalContext\r\nimport { GlobalContext } from \"./context/GlobalState\";\r\nexport const TransactionHistory = () => {\r\n\r\n    const {transactions} = useContext(GlobalContext)\r\n    //if we only do const value = useContext(GlobalContext)\r\n    //then in that case, it returns an array of value and function\r\n    //at index value[0], we have a value and at index[1] we have a function\r\n    //to update that value, here we only need values so we do destructuring\r\n    //by using {transactions}->value[0]\r\n\r\n\r\n    //console.log(transactions)\r\n    //checking whether we are getting transactions value or not\r\n    return (\r\n        <div>\r\n            <h3>\r\n                Transaction History\r\n            </h3>\r\n            <ul className=\"list\">\r\n                {transactions.map((transaction:any) => \r\n                    (\r\n                    <Transaction key={transaction.id} transaction={transaction} />\r\n                    )\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from \"./context/GlobalState\"\r\n\r\nexport const AddTransaction = () => {\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const [description, setDescription]:any= useState('');//to avoid uncontrolled to control issue\r\n    const [transactionamount, setTransactionAmount]:any= useState(0);\r\n\r\n    const onSubmit = (e: { preventDefault: () => void }) => {\r\n        e.preventDefault();\r\n\r\n        const newTransaction : {id:number, description: any, transactionamount: number} = {\r\n            id: new Date().getTime(),\r\n            description,\r\n            transactionamount: +transactionamount\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n        \r\n        //The below two lines of code will clear input fields on submit\r\n        setDescription('');\r\n        setTransactionAmount(0);\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h3> \r\n                Add New Transaction\r\n            </h3>\r\n            <form onSubmit={onSubmit}>  \r\n                \r\n                <div>\r\n                   \r\n                    <label htmlFor='description'>\r\n                        Description\r\n                    </label>\r\n                    <input   type=\"text\"\r\n                             id=\"description\" \r\n                             placeholder=\"Detail of Transaction\"\r\n                             value={description}\r\n                             onChange={(e) => setDescription(e.target.value)}//update description when add second time\r\n                    />\r\n\r\n                </div>\r\n\r\n                <div className=\"form-control\">    \r\n                    \r\n                    <label htmlFor=\"transactionamount\">\r\n                        Transaction Amount\r\n                    </label>\r\n                    <input  type=\"number\" \r\n                            id=\"transactionamount\" \r\n                            placeholder=\"Amount of Transaction\"\r\n                            value={transactionamount}\r\n                            onChange={(e) => setTransactionAmount(e.target.value)}\r\n                    />\r\n\r\n                </div>\r\n                <button className=\"btn\">\r\n                    Add Transaction\r\n                </button>\r\n            </form>\r\n     </div>\r\n        \r\n    )\r\n}","import firebase from 'firebase'\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyACwfIO4JgMIglU4u-DrQ1PEtCXb1ndR1U\",\r\n  authDomain: \"expense-tracker-pwa-3.firebaseapp.com\",\r\n  databaseURL: \"https://expense-tracker-pwa-3.firebaseio.com\",\r\n  projectId: \"expense-tracker-pwa-3\",\r\n  storageBucket: \"expense-tracker-pwa-3.appspot.com\",\r\n  messagingSenderId: \"668136596411\",\r\n  appId: \"1:668136596411:web:982886a2e9d6bff619da9e\"\r\n  };\r\n\r\nfirebase.initializeApp(config);\r\nconst messaging = firebase.messaging();\r\n\r\nexport function configNotification() {\r\n    \r\n  Notification.requestPermission().then((permission) => {\r\n      messaging.getToken().then((currentToken) => {\r\n        alert(currentToken);\r\n        prompt('token', currentToken);\r\n        console.log(currentToken)\r\n        \r\n        if (currentToken) {\r\n        } else {\r\n          // Show permission request.\r\n          console.log('No registration token available. Request permission to generate one.');\r\n\r\n        }\r\n      }).catch((err) => {\r\n        console.log('An error occurred while retrieving token. ', err);\r\n\r\n      });\r\n  \r\n  \r\n  })\r\n\r\n}","import React from 'react';\nimport './App.css';\n\n//import components\n\nimport Header from './components/Header';\nimport CurrentBalance from './components/CurrentBalance';\nimport { IncomeExpense } from './components/IncomeExpense';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\n\n//import global context\nimport { GlobalProvider } from './components/context/GlobalState';\nimport {configNotification} from './firebase';\n\n//1 Expense tracker by Muhammad Muneeb Waseem is one part, all other 4 components\n//lies in one container, thats why I created another div inside main div with \n//className= \"container\"\n\n    // {/* <div className=\"container\">\n    // <CurrentBalance />\n    // </div> */}\n\n\nfunction App() {\n  configNotification()\n  return (\n    <GlobalProvider>\n      <Header />\n\n      <div className=\"container\">\n        <CurrentBalance />\n        <IncomeExpense />\n        <TransactionHistory />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {swDev} from './swDev'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nswDev();\n","export function swDev() {\r\n\r\n    if ('serviceWorker' in navigator) {\r\n          navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n          }, function(err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n          });\r\n      } else {\r\n          console.log(\"ServiceWorker not found\")\r\n      }\r\n\r\n}"],"sourceRoot":""}