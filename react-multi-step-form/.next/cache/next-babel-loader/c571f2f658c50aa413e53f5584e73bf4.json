{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\Github\\\\react-multi-step-form\\\\src\\\\pages\\\\index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object } from 'yup';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nvar sleep = function sleep(time) {\n  return new Promise(function (acc) {\n    return setTimeout(acc, time);\n  });\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: \"100%\",\n      backgroundColor: \"#1F1F1F\",\n      color: \"#fff\"\n    }\n  });\n});\nexport default function Home() {\n  _s();\n\n  var classes = useStyles();\n  return __jsx(Card, {\n    style: {\n      backgroundColor: \"#757983\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      millionaire: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return sleep(3000);\n\n              case 2:\n                console.log('values', values);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(FormikStep, {\n    label: \"Personal Data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"firstName\",\n    component: TextField,\n    label: \"First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"lastName\",\n    component: TextField,\n    label: \"Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    name: \"millionaire\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'I am a millionaire'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Bank Accounts\",\n    validationSchema: object({\n      money: mixed().when('millionaire', {\n        is: true,\n        then: number().required().min(1000000, 'Because you said you are a millionaire you need to have 1 million'),\n        otherwise: number().required()\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"More Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }))))));\n}\n\n_s(Home, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport function FormikStep(_ref2) {\n  var children = _ref2.children;\n  return __jsx(React.Fragment, null, children);\n}\n_c2 = FormikStep;\nexport function FormikStepper(_ref3) {\n  _s2();\n\n  var _this = this;\n\n  var children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\n\n  var childrenArray = React.Children.toArray(children);\n\n  var _useState = useState(0),\n      step = _useState[0],\n      setStep = _useState[1];\n\n  var currentChild = childrenArray[step];\n\n  var _useState2 = useState(false),\n      completed = _useState2[0],\n      setCompleted = _useState2[1];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, helpers) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isLastStep()) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 3;\n                return props.onSubmit(values, helpers);\n\n              case 3:\n                setCompleted(true);\n                helpers.resetForm();\n                _context2.next = 9;\n                break;\n\n              case 7:\n                setStep(function (s) {\n                  return s + 1;\n                });\n                helpers.setTouched({});\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }), function (_ref5) {\n    var isSubmitting = _ref5.isSubmitting;\n    return __jsx(Form, {\n      autoComplete: \"off\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, __jsx(Stepper, {\n      alternativeLabel: true,\n      activeStep: step,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, childrenArray.map(function (child, index) {\n      return __jsx(Step, {\n        key: child.props.label,\n        completed: step > index || completed,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, __jsx(StepLabel, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, child.props.label));\n    })), currentChild, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, step > 0 ? __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      disabled: isSubmitting,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: function onClick() {\n        return setStep(function (s) {\n          return s - 1;\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, \"Back\")) : null, __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      startIcon: isSubmitting ? __jsx(CircularProgress, {\n        size: \"1rem\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 43\n        }\n      }) : null,\n      disabled: isSubmitting,\n      variant: \"contained\",\n      className: classes.root,\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'))));\n  });\n}\n\n_s2(FormikStepper, \"ofStvXvE4s5zSVpZTDgv2Qwx0Xo=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Home\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["D:/Github/react-multi-step-form/src/pages/index.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","Grid","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","React","useState","mixed","number","object","createStyles","makeStyles","sleep","time","Promise","acc","setTimeout","useStyles","theme","root","width","backgroundColor","color","Home","classes","firstName","lastName","millionaire","money","description","values","console","log","label","when","is","then","required","min","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","onSubmit","resetForm","s","setTouched","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import { Box, Button, Card, CardContent, CircularProgress, colors, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\r\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\r\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\r\nimport React, { useState } from 'react';\r\nimport { mixed, number, object } from 'yup';\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: \"#1F1F1F\",\r\n      color: \"#fff\",\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  return (\r\n    \r\n    <Card style={{backgroundColor: \"#757983\"}}>\r\n      <CardContent >\r\n        <FormikStepper \r\n          initialValues={{\r\n            firstName: '',\r\n            lastName: '',\r\n            millionaire: false,\r\n            money: 0,\r\n            description: '',\r\n          }}\r\n          onSubmit={async (values) => {\r\n            await sleep(3000);\r\n            console.log('values', values);\r\n          }}\r\n        >\r\n          <FormikStep label=\"Personal Data\">\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"firstName\" component={TextField} label=\"First Name\" />\r\n            </Box>\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"lastName\" component={TextField} label=\"Last Name\" />\r\n            </Box>\r\n            <Box paddingBottom={2}>\r\n              <Field\r\n                name=\"millionaire\"\r\n                type=\"checkbox\"\r\n                component={CheckboxWithLabel}\r\n                Label={{ label: 'I am a millionaire' }}\r\n              />\r\n            </Box>\r\n          </FormikStep>\r\n          <FormikStep\r\n            label=\"Bank Accounts\"\r\n            validationSchema={object({\r\n              money: mixed().when('millionaire', {\r\n                is: true,\r\n                then: number()\r\n                  .required()\r\n                  .min(\r\n                    1_000_000,\r\n                    'Because you said you are a millionaire you need to have 1 million'\r\n                  ),\r\n                otherwise: number().required(),\r\n              }),\r\n            })}\r\n          >\r\n            <Box paddingBottom={2}>\r\n              <Field\r\n                fullWidth\r\n                name=\"money\"\r\n                type=\"number\"\r\n                component={TextField}\r\n                label=\"All the money I have\"\r\n              />\r\n            </Box>\r\n          </FormikStep>\r\n          <FormikStep label=\"More Info\">\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"description\" component={TextField} label=\"Description\" />\r\n            </Box>\r\n          </FormikStep>\r\n        </FormikStepper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport interface FormikStepProps\r\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\r\n  label: string;\r\n}\r\n\r\nexport function FormikStep({ children }: FormikStepProps) {\r\n  return <>{children}</>;\r\n}\r\n\r\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\r\n  const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\r\n  const [step, setStep]= useState(0);\r\n  const currentChild = childrenArray[step];\r\n  const [completed, setCompleted] = useState(false);\r\n\r\n  function isLastStep() {\r\n    return step === childrenArray.length - 1;\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      {...props}\r\n      validationSchema={currentChild.props.validationSchema}\r\n      onSubmit={async (values, helpers) => {\r\n        if (isLastStep()) {\r\n          await props.onSubmit(values, helpers);\r\n          setCompleted(true);\r\n          helpers.resetForm();\r\n          \r\n        } else {\r\n          setStep((s) => s + 1);\r\n\r\n          helpers.setTouched({});\r\n        }\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form autoComplete=\"off\">\r\n          <Stepper alternativeLabel activeStep={step}>\r\n            {childrenArray.map((child, index) => (\r\n              <Step key={child.props.label} completed={step > index || completed}>\r\n                <StepLabel>{child.props.label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n\r\n          {currentChild}\r\n\r\n          <Grid container spacing={2}>\r\n            {step > 0 ? (\r\n              <Grid item>\r\n                <Button\r\n                  disabled={isSubmitting}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setStep((s) => s - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Grid>\r\n            ) : null}\r\n            <Grid item>\r\n              <Button\r\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\r\n                disabled={isSubmitting}\r\n                variant=\"contained\"\r\n                className={classes.root}\r\n                type=\"submit\"\r\n              >\r\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}