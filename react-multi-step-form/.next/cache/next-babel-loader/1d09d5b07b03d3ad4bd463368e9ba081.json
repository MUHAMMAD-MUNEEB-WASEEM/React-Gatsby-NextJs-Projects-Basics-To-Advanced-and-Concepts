{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\react-multi-step-form\\\\src\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object } from 'yup';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    backgroundColor: \"#757983\",\n    color: \"#fff\"\n  },\n  back: {\n    backgroundColor: \"#15d68d\",\n    backgroundImage: \"linear-gradient(90deg, #15d68d 0%, #09b3df 100%)\"\n  }\n}));\nexport default function Home() {\n  const classes = useStyles();\n  return __jsx(Card, {\n    style: {\n      backgroundColor: \"#757983\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      millionaire: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: async values => {\n      await sleep(3000);\n      console.log('values', values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(FormikStep, {\n    label: \"Personal Data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"firstName\",\n    component: TextField,\n    label: \"First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"lastName\",\n    component: TextField,\n    label: \"Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    name: \"millionaire\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'I am a millionaire'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Bank Accounts\",\n    validationSchema: object({\n      money: mixed().when('millionaire', {\n        is: true,\n        then: number().required().min(1000000, 'Because you said you are a millionaire you need to have 1 million'),\n        otherwise: number().required()\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"More Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }))))));\n}\nexport function FormikStep({\n  children\n}) {\n  return __jsx(React.Fragment, null, children);\n}\nexport function FormikStepper(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const childrenArray = React.Children.toArray(children);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const currentChild = childrenArray[step];\n  const {\n    0: completed,\n    1: setCompleted\n  } = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  const classes = useStyles();\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n        setCompleted(true);\n        helpers.resetForm();\n      } else {\n        setStep(s => s + 1);\n        helpers.setTouched({});\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }), ({\n    isSubmitting\n  }) => __jsx(Form, {\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, childrenArray.map((child, index) => __jsx(Step, {\n    key: child.props.label,\n    completed: step > index || completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, __jsx(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, child.props.label)))), currentChild, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, step > 0 ? __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setStep(s => s - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"Back\")) : null, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    startIcon: isSubmitting ? __jsx(CircularProgress, {\n      size: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 43\n      }\n    }) : null,\n    disabled: isSubmitting,\n    variant: \"contained\",\n    className: classes.back,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next')))));\n}","map":{"version":3,"sources":["D:/Github/react-multi-step-form/src/pages/index.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","Grid","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","React","useState","mixed","number","object","createStyles","makeStyles","sleep","time","Promise","acc","setTimeout","useStyles","theme","root","backgroundColor","color","back","backgroundImage","Home","classes","firstName","lastName","millionaire","money","description","values","console","log","label","when","is","then","required","min","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","onSubmit","resetForm","s","setTouched","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import { Box, Button, Card, CardContent, CircularProgress, colors, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\r\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\r\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\r\nimport React, { useState } from 'react';\r\nimport { mixed, number, object } from 'yup';\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      backgroundColor: \"#757983\",\r\n      color: \"#fff\",\r\n    },\r\n    back: {\r\n      backgroundColor: \"#15d68d\",\r\n      backgroundImage: \"linear-gradient(90deg, #15d68d 0%, #09b3df 100%)\",\r\n    }\r\n  })\r\n);\r\n\r\nexport default function Home() {\r\n  const classes: Record<\"root\", string> = useStyles();\r\n  return (\r\n    \r\n    <Card style={{backgroundColor: \"#757983\"}}>\r\n      <CardContent >\r\n        <FormikStepper \r\n          initialValues={{\r\n            firstName: '',\r\n            lastName: '',\r\n            millionaire: false,\r\n            money: 0,\r\n            description: '',\r\n          }}\r\n          onSubmit={async (values) => {\r\n            await sleep(3000);\r\n            console.log('values', values);\r\n          }}\r\n        >\r\n          <FormikStep label=\"Personal Data\">\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"firstName\" component={TextField} label=\"First Name\" />\r\n            </Box>\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"lastName\" component={TextField} label=\"Last Name\" />\r\n            </Box>\r\n            <Box paddingBottom={2}>\r\n              <Field\r\n                name=\"millionaire\"\r\n                type=\"checkbox\"\r\n                component={CheckboxWithLabel}\r\n                Label={{ label: 'I am a millionaire' }}\r\n              />\r\n            </Box>\r\n          </FormikStep>\r\n          <FormikStep\r\n            label=\"Bank Accounts\"\r\n            validationSchema={object({\r\n              money: mixed().when('millionaire', {\r\n                is: true,\r\n                then: number()\r\n                  .required()\r\n                  .min(\r\n                    1_000_000,\r\n                    'Because you said you are a millionaire you need to have 1 million'\r\n                  ),\r\n                otherwise: number().required(),\r\n              }),\r\n            })}\r\n          >\r\n            <Box paddingBottom={2}>\r\n              <Field\r\n                fullWidth\r\n                name=\"money\"\r\n                type=\"number\"\r\n                component={TextField}\r\n                label=\"All the money I have\"\r\n              />\r\n            </Box>\r\n          </FormikStep>\r\n          <FormikStep label=\"More Info\">\r\n            <Box paddingBottom={2}>\r\n              <Field fullWidth name=\"description\" component={TextField} label=\"Description\" />\r\n            </Box>\r\n          </FormikStep>\r\n        </FormikStepper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport interface FormikStepProps\r\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\r\n  label: string;\r\n}\r\n\r\nexport function FormikStep({ children }: FormikStepProps) {\r\n  return <>{children}</>;\r\n}\r\n\r\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\r\n  const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\r\n  const [step, setStep]= useState(0);\r\n  const currentChild = childrenArray[step];\r\n  const [completed, setCompleted] = useState(false);\r\n\r\n  function isLastStep() {\r\n    return step === childrenArray.length - 1;\r\n  }\r\n  const classes: Record<\"back\", string> = useStyles();\r\n  return (\r\n    <Formik\r\n      {...props}\r\n      validationSchema={currentChild.props.validationSchema}\r\n      onSubmit={async (values, helpers) => {\r\n        if (isLastStep()) {\r\n          await props.onSubmit(values, helpers);\r\n          setCompleted(true);\r\n          helpers.resetForm();\r\n          \r\n        } else {\r\n          setStep((s) => s + 1);\r\n\r\n          helpers.setTouched({});\r\n        }\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form autoComplete=\"off\">\r\n          <Stepper alternativeLabel activeStep={step}>\r\n            {childrenArray.map((child, index) => (\r\n              <Step key={child.props.label} completed={step > index || completed}>\r\n                <StepLabel>{child.props.label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n\r\n          {currentChild}\r\n\r\n          <Grid container spacing={2}>\r\n            {step > 0 ? (\r\n              <Grid item>\r\n                <Button\r\n                  disabled={isSubmitting}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setStep((s) => s - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Grid>\r\n            ) : null}\r\n            <Grid item>\r\n              <Button\r\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\r\n                disabled={isSubmitting}\r\n                variant=\"contained\"\r\n                className={classes.back}\r\n                type=\"submit\"\r\n              >\r\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}